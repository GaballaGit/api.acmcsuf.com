// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package models

import (
	"context"
	"database/sql"
)

const createAnnouncement = `-- name: CreateAnnouncement :one
INSERT INTO
announcement (
    uuid,
    visibility,
    announce_at,
    discord_channel_id,
    discord_message_id
)
VALUES
(?, ?, ?, ?, ?)
RETURNING uuid, visibility, announce_at, discord_channel_id, discord_message_id
`

type CreateAnnouncementParams struct {
	Uuid             string         `json:"uuid"`
	Visibility       string         `json:"visibility"`
	AnnounceAt       int64          `json:"announce_at"`
	DiscordChannelID sql.NullString `json:"discord_channel_id"`
	DiscordMessageID sql.NullString `json:"discord_message_id"`
}

func (q *Queries) CreateAnnouncement(ctx context.Context, arg CreateAnnouncementParams) (Announcement, error) {
	row := q.db.QueryRowContext(ctx, createAnnouncement,
		arg.Uuid,
		arg.Visibility,
		arg.AnnounceAt,
		arg.DiscordChannelID,
		arg.DiscordMessageID,
	)
	var i Announcement
	err := row.Scan(
		&i.Uuid,
		&i.Visibility,
		&i.AnnounceAt,
		&i.DiscordChannelID,
		&i.DiscordMessageID,
	)
	return i, err
}

const createEvent = `-- name: CreateEvent :exec
INSERT INTO
event (
    uuid,
    location,
    start_at,
    end_at,
    is_all_day,
    host
    -- the following doens't exist in schema
    -- visibility
)
VALUES
(?, ?, ?, ?, ?, ?)
RETURNING uuid, location, start_at, end_at, is_all_day, host
`

type CreateEventParams struct {
	Uuid     string      `json:"uuid"`
	Location string      `json:"location"`
	StartAt  interface{} `json:"start_at"`
	EndAt    interface{} `json:"end_at"`
	IsAllDay bool        `json:"is_all_day"`
	Host     string      `json:"host"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) error {
	_, err := q.db.ExecContext(ctx, createEvent,
		arg.Uuid,
		arg.Location,
		arg.StartAt,
		arg.EndAt,
		arg.IsAllDay,
		arg.Host,
	)
	return err
}

const createPerson = `-- name: CreatePerson :one
INSERT INTO
person (uuid, name, preferred_pronoun)
VALUES
(?, ?, ?)
RETURNING uuid, name, preferred_pronoun
`

type CreatePersonParams struct {
	Uuid             string         `json:"uuid"`
	Name             sql.NullString `json:"name"`
	PreferredPronoun sql.NullString `json:"preferred_pronoun"`
}

func (q *Queries) CreatePerson(ctx context.Context, arg CreatePersonParams) (Person, error) {
	row := q.db.QueryRowContext(ctx, createPerson, arg.Uuid, arg.Name, arg.PreferredPronoun)
	var i Person
	err := row.Scan(&i.Uuid, &i.Name, &i.PreferredPronoun)
	return i, err
}

const getAnnouncement = `-- name: GetAnnouncement :one
SELECT
    uuid,
    visibility,
    announce_at,
    discord_channel_id,
    discord_message_id
FROM
    announcement
WHERE
    uuid = ?
`

func (q *Queries) GetAnnouncement(ctx context.Context, uuid string) (Announcement, error) {
	row := q.db.QueryRowContext(ctx, getAnnouncement, uuid)
	var i Announcement
	err := row.Scan(
		&i.Uuid,
		&i.Visibility,
		&i.AnnounceAt,
		&i.DiscordChannelID,
		&i.DiscordMessageID,
	)
	return i, err
}

const getBoard = `-- name: GetBoard :one
SELECT
    id,
    name,
    branch,
    github,
    discord,
    year,
    bio
FROM
    board_member
WHERE
    id = ?
`

func (q *Queries) GetBoard(ctx context.Context, id interface{}) (BoardMember, error) {
	row := q.db.QueryRowContext(ctx, getBoard, id)
	var i BoardMember
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Branch,
		&i.Github,
		&i.Discord,
		&i.Year,
		&i.Bio,
	)
	return i, err
}

const getEvent = `-- name: GetEvent :one
SELECT
    uuid,
    location,
    start_at,
    end_at,
    is_all_day,
    host
FROM
    event
WHERE
    uuid = ?
`

func (q *Queries) GetEvent(ctx context.Context, uuid string) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEvent, uuid)
	var i Event
	err := row.Scan(
		&i.Uuid,
		&i.Location,
		&i.StartAt,
		&i.EndAt,
		&i.IsAllDay,
		&i.Host,
	)
	return i, err
}

const getPerson = `-- name: GetPerson :one
SELECT
    uuid,
    name,
    preferred_pronoun
FROM
    person
WHERE
    uuid = ?
`

func (q *Queries) GetPerson(ctx context.Context, uuid string) (Person, error) {
	row := q.db.QueryRowContext(ctx, getPerson, uuid)
	var i Person
	err := row.Scan(&i.Uuid, &i.Name, &i.PreferredPronoun)
	return i, err
}
