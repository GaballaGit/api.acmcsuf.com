// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: events.sql

package models

import (
	"context"
)

const createEvent = `-- name: CreateEvent :exec
INSERT INTO
event (
    uuid,
    location,
    start_at,
    end_at,
    is_all_day,
    host
    -- the following doens't exist in schema
    -- visibility
)
VALUES
(?, ?, ?, ?, ?, ?)
RETURNING uuid, location, start_at, end_at, is_all_day, host
`

type CreateEventParams struct {
	Uuid     string      `json:"uuid"`
	Location string      `json:"location"`
	StartAt  interface{} `json:"start_at"`
	EndAt    interface{} `json:"end_at"`
	IsAllDay bool        `json:"is_all_day"`
	Host     string      `json:"host"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) error {
	_, err := q.db.ExecContext(ctx, createEvent,
		arg.Uuid,
		arg.Location,
		arg.StartAt,
		arg.EndAt,
		arg.IsAllDay,
		arg.Host,
	)
	return err
}

const getEvent = `-- name: GetEvent :one
SELECT
    uuid,
    location,
    start_at,
    end_at,
    is_all_day,
    host
FROM
    event
WHERE
    uuid = ?
`

func (q *Queries) GetEvent(ctx context.Context, uuid string) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEvent, uuid)
	var i Event
	err := row.Scan(
		&i.Uuid,
		&i.Location,
		&i.StartAt,
		&i.EndAt,
		&i.IsAllDay,
		&i.Host,
	)
	return i, err
}
